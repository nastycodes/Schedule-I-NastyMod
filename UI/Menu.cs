using System.Collections.Generic;
using NastyMod_v2.Core;
using MelonLoader;
using UnityEngine;
using Il2CppScheduleOne.PlayerScripts;
using Il2CppScheduleOne.DevUtilities;

namespace NastyMod_v2.UI
{
    /**
     * Menu
     * 
     * This is the menu class for the NastyMod project.
     * 
     * Author: nastycodes
     * Version: 1.0.0
     */
    public class Menu
    {
        // Mod instance
        public static Mod ModInstance { get; private set; } = new Mod();

        // Dragging variables
        private static bool IsDragging = false;
        private static Vector2 DragOffset;

        // Resizing variables
        private static bool IsResizing = false;
        private static Vector2 ResizeOffset;
        private static int ResizeBorderSize = 10;

        // Toggle hotkey
        private static KeyCode ToggleHotkey = KeyCode.F11;
        private static KeyCode AltToggleHotkey = KeyCode.RightAlt;

        // Initialized flag
        private static bool Initialized = false;

        // Visible flag
        private static bool Visible = false;

        // Menu variables
        private static int MenuWidth = Properties.Settings.Default.MenuWidth;
        private static int MenuHeight = Properties.Settings.Default.MenuHeight;
        private static int MenuX = 50;
        private static int MenuY = 50;
        private static int MenuCurrentY = 0;
        private static int MenuSpacing = 14;

        // Tab debug
        private static bool TabDebug = false;

        // Tab variables
        private static int MenuTabWidth = Properties.Settings.Default.MenuTabWidth;
        private static int MenuTabHeight = 0;
        public List<(string, System.Action)> MenuTabs = new List<(string, System.Action)>
        {
            ("PLAYER", RenderPlayerTab),
            ("WORLD", RenderWorldTab),
            ("SPAWNER", RenderSpawnerTab),
            ("MISC", RenderMiscTab),
            ("TELEPORT", RenderTeleportTab),
            ("EMPLOYEES", RenderEmployeesTab)
        };
        private static int MenuTabButtonSpacing = 4;
        private static int MenuTabButtonWidth = 0;
        private int CurrentTab = 0;

        // Collapsible variables
        private static Dictionary<string, bool> CollapseStates = new Dictionary<string, bool>();
        private static Dictionary<string, int> CollapseHeights = new Dictionary<string, int>();

        // Sidebar variables
        private static int SidebarWidth = 0;
        private static int SidebarHeight = 0;
        private static int SidebarContentWidth = 0;
        private static int SidebarContentHeight = 0;
        private static int SidebarContentButtons = 4;

        // Scroll positions
        private static Dictionary<string, Vector2> ScrollPositions = new Dictionary<string, Vector2>();

        // Textfields
        private static Dictionary<string, Textfield> Textfields = new Dictionary<string, Textfield>();

        // Textures
        private static Texture2D CursorTexture;
        private static string CursorTextureString = "";
        private static Texture2D ResizeCursorTexture;
        private static string ResizeCursorTextureString = "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";
        private static Texture2D MoveCursorTexture;
        private static string MoveCursorTextureString = "";
        private static Texture2D MenuBgTexture;
        private static Texture2D TabBgTexture;
        private static Texture2D HighlightTexture;

        // GUI styles
        private static GUIStyle MenuStyle;
        private static GUIStyle TabStyle;
        private static GUIStyle MenuCloseButtonStyle;
        private static GUIStyle TitleStyle;
        private static GUIStyle HeaderStyle;
        private static GUIStyle SubHeaderStyle;
        private static GUIStyle MenuTabButtonStyle;
        private static GUIStyle ButtonStyle;
        private static GUIStyle LargeButtonStyle;
        private static GUIStyle SidebarButtonStyle;
        private static GUIStyle SidebarButtonFullStyle;
        private static GUIStyle SidebarContentButtonStyle;
        private static GUIStyle LabelStyle;
        private static GUIStyle CharLabelStyle;
        private static GUIStyle BoldLabelStyle;
        private static GUIStyle EmptyLabelStyle;
        private static GUIStyle MediumLabelStyle;
        private static GUIStyle SmallLabelStyle;
        private static GUIStyle TextfieldStyle;
        private static GUIStyle SliderStyle;

        // Colors
        public static Color BackgroundColor = new Color(0.09f, 0.09f, 0.09f);         // Dark gray background
        public static Color TabColor = new Color(0.18f, 0.18f, 0.18f);                // Gray panel
        public static Color HighlightColor = new Color(0.137f, 0.286f, 0.820f);       // Blue highlight
        public static Color accentColor = new Color(1f, 0.843f, 0f);                  // Gold accent
        public static Color warningColor = new Color(0.95f, 0.55f, 0.15f);            // Orange warning
        public static Color dangerColor = new Color(0.95f, 0.25f, 0.25f);             // Red danger
        public static Color successColor = new Color(0.25f, 0.95f, 0.25f);            // Green success
        public static Color textColor = new Color(0.94f, 0.94f, 0.94f);               // White text
        public static Color dimTextColor = new Color(0.82f, 0.82f, 0.82f);            // Dim white text

        /**
         * GetToggleHotkey
         * 
         * Returns the toggle hotkey for the menu.
         * 
         * @return KeyCode The toggle hotkey.
         */
        public KeyCode GetToggleHotkey() => ToggleHotkey;

        /**
         * GetAltToggleHotkey
         * 
         * Returns the alternate toggle hotkey for the menu.
         * 
         * @return KeyCode The alternate toggle hotkey.
         */
        public KeyCode GetAltToggleHotkey() => AltToggleHotkey;

        /**
         * IsInitialized
         * 
         * Checks if the menu is initialized.
         * 
         * @return bool True if the menu is initialized, false otherwise.
         */
        public bool IsInitialized() => Initialized;

        /**
         * SetInitialized
         * 
         * Sets the initialized flag to true and caches game items.
         * 
         * @return void
         */
        public void SetInitialized()
        {
            Initialized = true;

            ModInstance.SetInstanceReference();

            MelonCoroutines.Start(ModInstance.CacheDelayed());
            MelonCoroutines.Start(ModInstance.CheckPots());
            MelonCoroutines.Start(ModInstance.CheckEmployees());
            MelonCoroutines.Start(ModInstance.CheckEmployeeSpeeds());
        }

        /**
         * IsVisible
         * 
         * Checks if the menu is visible.
         * 
         * @return bool True if the menu is visible, false otherwise.
         */
        public bool IsVisible() => Visible;

        /**
         * ToggleVisible
         * 
         * Toggles the visibility of the menu.
         * 
         * @return void
         */
        public void ToggleVisible()
        {
            Visible = !Visible;
            ToggleUI();
        }

        /**
         * ToggleUI
         * 
         * Toggles the UI elements based on the visibility of the menu.
         * 
         * @return void
         */
        private void ToggleUI()
        {
            // Reset animation timers
            if (Visible)
            {
                // Show cursor and unlock
                Cursor.visible = true;
                Cursor.lockState = CursorLockMode.None;

                // Temporarily disable the player movement
                if (PlayerMovement.Instance != null) PlayerMovement.Instance.enabled = false;

                // Temporarily disable the player camera
                if (PlayerCamera.Instance != null) PlayerCamera.Instance.enabled = false;

                // Temporarily set the stamina to 0
                PlayerMovement.Instance?.SetStamina(0);
            }
            else
            {
                // Hide cursor and lock
                Cursor.visible = false;
                Cursor.lockState = CursorLockMode.Locked;

                // Re-enable the player movement
                if (PlayerMovement.Instance != null) PlayerMovement.Instance.enabled = true;

                // Re-enable the player camera
                if (PlayerCamera.Instance != null) PlayerCamera.Instance.enabled = true;

                // Reset stamina
                PlayerMovement.Instance?.SetStamina(PlayerMovement.StaminaReserveMax);
            }
        }

        /**
         * SetCurrentTab
         * 
         * This method sets the current tab.
         * 
         * @param int Tab The tab to set.
         * @return void
         */
        private void SetCurrentTab(int Tab) => CurrentTab = Tab;

        /**
         * BuildGuiStyles
         * 
         * This method builds the GUI styles for the menu.
         * 
         * @return void
         */
        private void BuildGuiStyles()
        {
            MenuStyle = new GUIStyle(GUI.skin.box)
            {
                fontSize = 16,
                fixedWidth = MenuWidth,
                fixedHeight = MenuHeight,
            };
            MenuBgTexture = new Texture2D(1, 1);
            MenuBgTexture.SetPixel(0, 0, BackgroundColor);
            MenuBgTexture.Apply();
            MenuStyle.normal.background = MenuBgTexture;

            TabStyle = new GUIStyle(GUI.skin.box)
            {
                fontSize = 14,
            };
            TabBgTexture = new Texture2D(1, 1);
            TabBgTexture.SetPixel(0, 0, TabColor);
            TabBgTexture.Apply();
            TabStyle.normal.background = TabBgTexture;


            MenuCloseButtonStyle = new GUIStyle(GUI.skin.button)
            {
                fontSize = 14,
                fixedWidth = 72,
                fixedHeight = 24
            };
            MenuCloseButtonStyle.normal.background = TabBgTexture;
            MenuCloseButtonStyle.hover.background = MenuBgTexture;
            MenuCloseButtonStyle.active.background = TabBgTexture;
            MenuCloseButtonStyle.focused.background = TabBgTexture;

            TitleStyle = new GUIStyle(GUI.skin.label)
            {
                fontSize = 20,
                fontStyle = FontStyle.Bold,
                fixedHeight = 30,
            };

            HeaderStyle = new GUIStyle(GUI.skin.label)
            {
                fontSize = 16,
                fixedHeight = 24,
                fontStyle = FontStyle.Bold,
            };

            SubHeaderStyle = new GUIStyle(GUI.skin.label)
            {
                fontSize = 14,
                fontStyle = FontStyle.Bold,
            };

            MenuTabButtonWidth = (MenuWidth - (2 * MenuSpacing) - ((MenuTabs.Count - 1) * MenuTabButtonSpacing)) / MenuTabs.Count;
            MenuTabButtonStyle = new GUIStyle(GUI.skin.button)
            {
                fontSize = 14,
                fixedWidth = MenuTabButtonWidth,
                fixedHeight = 24,
            };
            var MenuTabButtonBgTexture = new Texture2D(1, 1);
            MenuTabButtonBgTexture.SetPixel(0, 0, TabColor);
            MenuTabButtonBgTexture.Apply();
            HighlightTexture = new Texture2D(1, 1);
            HighlightTexture.SetPixel(0, 0, HighlightColor);
            HighlightTexture.Apply();
            MenuTabButtonStyle.normal.background = MenuBgTexture;
            MenuTabButtonStyle.hover.background = HighlightTexture;
            MenuTabButtonStyle.active.background = HighlightTexture;
            MenuTabButtonStyle.focused.background = TabBgTexture;
            MenuTabButtonStyle.onNormal.background = MenuBgTexture;
            MenuTabButtonStyle.onHover.background = HighlightTexture;
            MenuTabButtonStyle.onActive.background = HighlightTexture;
            MenuTabButtonStyle.onFocused.background = TabBgTexture;

            ButtonStyle = new GUIStyle(GUI.skin.button)
            {
                fontSize = 14,
                fixedWidth = 80,
                fixedHeight = 24
            };
            var ButtonBgTexture = new Texture2D(1, 1);
            ButtonBgTexture.SetPixel(0, 0, BackgroundColor);
            ButtonBgTexture.Apply();
            ButtonStyle.normal.background = MenuBgTexture;
            ButtonStyle.hover.background = MenuBgTexture;
            ButtonStyle.active.background = MenuBgTexture;
            ButtonStyle.focused.background = MenuBgTexture;
            ButtonStyle.onNormal.background = MenuBgTexture;
            ButtonStyle.onHover.background = MenuBgTexture;
            ButtonStyle.onActive.background = MenuBgTexture;
            ButtonStyle.onFocused.background = MenuBgTexture;

            LargeButtonStyle = new GUIStyle(GUI.skin.button)
            {
                fontSize = 14,
                fixedWidth = 120,
                fixedHeight = 24
            };
            LargeButtonStyle.normal.background = MenuBgTexture;
            LargeButtonStyle.hover.background = MenuBgTexture;
            LargeButtonStyle.active.background = MenuBgTexture;
            LargeButtonStyle.focused.background = MenuBgTexture;
            LargeButtonStyle.onNormal.background = MenuBgTexture;
            LargeButtonStyle.onHover.background = MenuBgTexture;
            LargeButtonStyle.onActive.background = MenuBgTexture;
            LargeButtonStyle.onFocused.background = MenuBgTexture;

            SidebarButtonFullStyle = new GUIStyle(GUI.skin.button)
            {
                fontSize = 14,
                fixedWidth = 80,
                fixedHeight = 24
            };
            SidebarButtonFullStyle.normal.background = MenuBgTexture;
            SidebarButtonFullStyle.hover.background = MenuBgTexture;
            SidebarButtonFullStyle.active.background = MenuBgTexture;
            SidebarButtonFullStyle.focused.background = MenuBgTexture;
            SidebarButtonFullStyle.onNormal.background = MenuBgTexture;
            SidebarButtonFullStyle.onHover.background = MenuBgTexture;
            SidebarButtonFullStyle.onActive.background = MenuBgTexture;
            SidebarButtonFullStyle.onFocused.background = MenuBgTexture;

            SidebarButtonStyle = ButtonStyle;
            SidebarContentButtonStyle = ButtonStyle;

            LabelStyle = new GUIStyle(GUI.skin.label)
            {
                fontSize = 14,
                fixedWidth = 180,
                fixedHeight = 24,
            };

            CharLabelStyle = new GUIStyle(GUI.skin.label)
            {
                fontSize = 14,
                fixedWidth = 12,
                fixedHeight = 24
            };

            BoldLabelStyle = new GUIStyle(GUI.skin.label)
            {
                fontSize = 14,
                fontStyle = FontStyle.Bold,
                fixedWidth = 180,
                fixedHeight = 24
            };

            EmptyLabelStyle = new GUIStyle(GUI.skin.label)
            {
                fontSize = 14,
                fixedWidth = 0,
                fixedHeight = 24
            };

            MediumLabelStyle = new GUIStyle(GUI.skin.label)
            {
                fontSize = 14,
                fixedWidth = 50,
                fixedHeight = 24
            };

            SmallLabelStyle = new GUIStyle(GUI.skin.label)
            {
                fontSize = 13,
                fixedWidth = 35,
                fixedHeight = 24
            };

            TextfieldStyle = new GUIStyle(GUI.skin.textField)
            {
                fontSize = 14,
                fixedHeight = 24
            };
            var TextfieldBgTexture = new Texture2D(1, 1);
            TextfieldBgTexture.SetPixel(0, 0, BackgroundColor);
            TextfieldBgTexture.Apply();
            TextfieldStyle.normal.background = MenuBgTexture;
            TextfieldStyle.focused.background = TabBgTexture;
            TextfieldStyle.hover.background = TabBgTexture;
            TextfieldStyle.onNormal.background = MenuBgTexture;
            TextfieldStyle.onHover.background = TabBgTexture;
            TextfieldStyle.onFocused.background = TabBgTexture;

            SliderStyle = new GUIStyle(GUI.skin.horizontalSlider)
            {
                fontSize = 14,
                fixedHeight = 10
            };
            var SliderBgTexture = new Texture2D(1, 1);
            SliderBgTexture.SetPixel(0, 0, BackgroundColor);
            SliderBgTexture.Apply();
            SliderStyle.normal.background = SliderBgTexture;
            SliderStyle.hover.background = SliderBgTexture;
            SliderStyle.focused.background = SliderBgTexture;
            SliderStyle.onNormal.background = SliderBgTexture;
            SliderStyle.onHover.background = SliderBgTexture;
            SliderStyle.onFocused.background = SliderBgTexture;
        }

        /**
         * Render
         * 
         * This method renders the menu.
         * 
         * @return void
         */
        public void Render()
        {
            MenuCurrentY = 0;

            // Build GUI styles
            BuildGuiStyles();

            // Handle dragging
            Event currentEvent = Event.current;
            Rect dragArea = new Rect(MenuX, MenuY, MenuWidth - MenuCloseButtonStyle.fixedWidth - MenuSpacing, 30);

            if (currentEvent.type == EventType.MouseDown && dragArea.Contains(currentEvent.mousePosition))
            {
                IsDragging = true;
                DragOffset = new Vector2(currentEvent.mousePosition.x - MenuX, currentEvent.mousePosition.y - MenuY);
                currentEvent.Use();
            }
            else if (currentEvent.type == EventType.MouseDrag && IsDragging)
            {
                MenuX = (int)(currentEvent.mousePosition.x - DragOffset.x);
                MenuY = (int)(currentEvent.mousePosition.y - DragOffset.y);
                currentEvent.Use();
            }
            else if (currentEvent.type == EventType.MouseUp)
            {
                IsDragging = false;
            }

            // Handle resizing
            Rect resizeArea = new Rect(MenuX + MenuWidth - ResizeBorderSize, MenuY + MenuHeight - ResizeBorderSize, ResizeBorderSize, ResizeBorderSize);

            if (currentEvent.type == EventType.MouseDown && resizeArea.Contains(currentEvent.mousePosition))
            {
                IsResizing = true;
                ResizeOffset = new Vector2(currentEvent.mousePosition.x - MenuWidth, currentEvent.mousePosition.y - MenuHeight);
                currentEvent.Use();
            }
            else if (currentEvent.type == EventType.MouseDrag && IsResizing)
            {
                MenuWidth = Mathf.Clamp((int)(currentEvent.mousePosition.x - MenuX), 200, Screen.width); // Minimum width: 200
                MenuHeight = Mathf.Clamp((int)(currentEvent.mousePosition.y - MenuY), 200, Screen.height); // Minimum height: 200
                currentEvent.Use();
            }
            else if (currentEvent.type == EventType.MouseUp)
            {
                IsResizing = false;
            }

            // Set the menu width and height
            if (Properties.Settings.Default.MenuWidth != MenuWidth)
            {
                Properties.Settings.Default.MenuWidth = MenuWidth;
            }
            if (Properties.Settings.Default.MenuHeight != MenuHeight)
            {
                Properties.Settings.Default.MenuHeight = MenuHeight;
            }

            // Set the menu tab width
            if (MenuTabWidth != MenuWidth - (2 * MenuSpacing))
            {
                MenuTabWidth = MenuWidth - (2 * MenuSpacing);
            }
            if (Properties.Settings.Default.MenuTabWidth != MenuTabWidth)
            {
                Properties.Settings.Default.MenuTabWidth = MenuTabWidth;
            }

            // Set the cursor appearance
            if (dragArea.Contains(currentEvent.mousePosition))
            {
                CursorManager.Instance.SetCursorAppearance(CursorManager.ECursorType.Grab);
            } 
            else if (resizeArea.Contains(currentEvent.mousePosition))
            {
                CursorManager.Instance.SetCursorAppearance(CursorManager.ECursorType.Scissors);
            } 
            else
            { 
                CursorManager.Instance.SetCursorAppearance(CursorManager.ECursorType.Finger);
            }

            GUILayout.BeginArea(new Rect(MenuX, MenuY, MenuWidth, MenuHeight), MenuStyle);
            MenuCurrentY += MenuSpacing;

            // Title
            GUILayout.BeginArea(new Rect(MenuSpacing, MenuCurrentY, MenuTabWidth, TitleStyle.fixedHeight));
            GUILayout.BeginHorizontal();
            GUILayout.Label("NastyMod v2", TitleStyle);
            GUILayout.FlexibleSpace();
            if (GUILayout.Button("Close", MenuCloseButtonStyle))
            {
                ToggleVisible();
            }
            EndHorizontal();
            GUILayout.EndArea();
            MenuCurrentY += (int)TitleStyle.fixedHeight + MenuSpacing;

            // Tab navigation
            GUILayout.BeginArea(new Rect(MenuSpacing, MenuCurrentY, MenuTabWidth, MenuTabButtonStyle.fixedHeight));
            GUILayout.BeginHorizontal();
            for (int i = 0; i < MenuTabs.Count; i++)
            {
                if (CurrentTab == i)
                {
                    MenuTabButtonStyle.normal.background = HighlightTexture;
                    MenuTabButtonStyle.hover.background = HighlightTexture;
                    MenuTabButtonStyle.active.background = HighlightTexture;
                    MenuTabButtonStyle.focused.background = HighlightTexture;
                }
                else
                {
                    MenuTabButtonStyle.normal.background = MenuBgTexture;
                    MenuTabButtonStyle.hover.background = HighlightTexture;
                    MenuTabButtonStyle.active.background = MenuBgTexture;
                    MenuTabButtonStyle.focused.background = MenuBgTexture;
                }

                if (GUILayout.Button(MenuTabs[i].Item1, MenuTabButtonStyle))
                {
                    SetCurrentTab(i);
                }
            }
            GUILayout.EndHorizontal();
            GUILayout.EndArea();
            MenuCurrentY += (int)ButtonStyle.fixedHeight + MenuSpacing;

            // Tab content
            GUILayout.BeginArea(new Rect(MenuSpacing, MenuCurrentY, MenuTabWidth, MenuHeight - MenuCurrentY - MenuSpacing), TabStyle);
            try
            {
                MenuTabs[CurrentTab].Item2.Invoke();
            }
            catch (System.Exception e)
            {
                Debug.LogError($"Error rendering tab: {e}");
            }
            GUILayout.EndArea();
            
            GUILayout.EndArea();
        }

        /**
         * BeginTab
         * 
         * Begins a new tab area.
         * 
         * @return void
         */
        private static void BeginTab()
        {
            MenuTabHeight = MenuHeight - MenuCurrentY - (MenuSpacing * 2);
            GUILayout.BeginArea(new Rect(MenuSpacing, MenuSpacing, MenuTabWidth, MenuTabHeight));
        }

        /**
         * EndTab
         * 
         * Ends the current tab area.
         * 
         * @return void
         */
        private static void EndTab()
        {
            GUILayout.EndArea();
        }

        /**
         * BeginSidebar
         * 
         * Begins a new sidebar area.
         * 
         * @param int SidebarWidth The width of the sidebar.
         * @return void
         */
        private static void BeginSidebar(int SidebarWidth)
        {
            GUILayout.BeginArea(new Rect(0, 0, SidebarWidth, MenuTabHeight));
        }

        /**
         * EndSidebar
         * 
         * Ends the current sidebar area.
         * 
         * @return void
         */
        private static void EndSidebar()
        {
            GUILayout.EndArea();
        }

        /**
         * BeginSidebarContent
         * 
         * Begins a new sidebar content area.
         * 
         * @param int SidebarContentWidth The width of the sidebar content.
         * @return void
         */
        private static void BeginSidebarContent(int SidebarContentWidth)
        {
            GUILayout.BeginArea(new Rect(SidebarWidth + MenuSpacing, 0, SidebarContentWidth, MenuTabHeight));
        }

        /**
         * EndSidebarContent
         * 
         * Ends the current sidebar content area.
         * 
         * @return void
         */
        private static void EndSidebarContent()
        {
            GUILayout.EndArea();
        }

        /**
         * BeginScrollContainer
         * 
         * Begins a new scroll container.
         * 
         * @param Vector2 ScrollPosition The current scroll position.
         * @param int Width The width of the scroll container.
         * @param int Height The height of the scroll container.
         * @return void
         */
        private static void BeginScrollContainer(ref Vector2 ScrollPosition, int Width, int Height)
        {
            ScrollPosition = GUILayout.BeginScrollView(ScrollPosition, GUILayout.Width(Width), GUILayout.Height(Height));
        }

        /**
         * EndScrollContainer
         * 
         * Ends the current scroll container.
         * 
         * @return void
         */
        private static void EndScrollContainer()
        {
            GUILayout.EndScrollView();
        }

        /**
         * BeginHorizontal
         * 
         * Begins a new horizontal layout.
         * 
         * @return void
         */
        private static void BeginHorizontal()
        {
            GUILayout.BeginHorizontal();
        }

        /**
         * EndHorizontal
         * 
         * Ends the current horizontal layout.
         * 
         * @return void
         */
        private static void EndHorizontal()
        {
            GUILayout.EndHorizontal();
        }

        /**
         * BeginOption
         * 
         * Begins a new option layout.
         * 
         * @param string OptionName The name of the option.
         * @param GUIStyle _LabelStyle The label style.
         * @param bool EndOption Whether to end the option layout.
         * @return void
         */
        private static void BeginOption(string OptionName, GUIStyle _LabelStyle, bool EndOption = false)
        {
            GUILayout.BeginHorizontal();
            GUILayout.Label(OptionName, _LabelStyle);
            if (EndOption) GUILayout.EndHorizontal();
        }

        /**
         * EndOption
         * 
         * Ends the current option layout.
         * 
         * @return void
         */
        private static void EndOption()
        {
            GUILayout.EndHorizontal();
        }

        /**
         * BeginCollapse
         * 
         * Begins a new collapse layout.
         * 
         * @param float CollapseWidth The width of the collapse.
         * @param float CollapseHeight The height of the collapse.
         * @param string CollapseID The ID of the collapse.
         * @param string Title The title of the collapse.
         * @return bool True if the collapse is not collapsed, false otherwise.
         */
        private static bool BeginCollapse(float CollapseWidth, float CollapseHeight, string CollapseID, string Title)
        {
            // State and height management
            if (!CollapseStates.ContainsKey(CollapseID)) CollapseStates.Add(CollapseID, false);
            if (!CollapseHeights.ContainsKey(CollapseID)) CollapseHeights.Add(CollapseID, 0);
            CollapseHeights[CollapseID] = CollapseStates[CollapseID] ? (int)BoldLabelStyle.fixedHeight : (int)CollapseHeight;

            // Scrollable area
            if (!CollapseStates[CollapseID])
            {
                GUILayout.Label(Title, BoldLabelStyle);

                if (!ScrollPositions.ContainsKey($"{CollapseID}Scroll")) ScrollPositions[$"{CollapseID}Scroll"] = Vector2.zero;
                Vector2 TmpSpawnerScrollPosition = ScrollPositions[$"{CollapseID}Scroll"];
                BeginScrollContainer(ref TmpSpawnerScrollPosition, (int)CollapseWidth, (int)CollapseHeight - (int)BoldLabelStyle.fixedHeight - MenuTabButtonSpacing);
                ScrollPositions[$"{CollapseID}Scroll"] = TmpSpawnerScrollPosition;
            }
            else
            {
                if (!ScrollPositions.ContainsKey($"{CollapseID}Scroll")) ScrollPositions[$"{CollapseID}Scroll"] = Vector2.zero;
                Vector2 TmpSpawnerScrollPosition = ScrollPositions[$"{CollapseID}Scroll"];
                BeginScrollContainer(ref TmpSpawnerScrollPosition, (int)CollapseWidth, 0);
                ScrollPositions[$"{CollapseID}Scroll"] = TmpSpawnerScrollPosition;
            }

            return CollapseStates[CollapseID];
        }

        /**
         * ToggleCollapse
         * 
         * Toggles the collapse state.
         * 
         * @param string CollapseID The ID of the collapse.
         * @return void
         */
        private static void ToggleCollapse(string CollapseID)
        {
            if (CollapseStates.ContainsKey(CollapseID))
            {
                CollapseStates[CollapseID] = !CollapseStates[CollapseID];
            }
        }

        /**
         * GetCollapseState
         * 
         * Gets the collapse state.
         * 
         * @param string CollapseID The ID of the collapse.
         * @return bool The collapse state.
         */
        private static bool GetCollapseState(string CollapseID)
        {
            return CollapseStates.ContainsKey(CollapseID) ? CollapseStates[CollapseID] : false;
        }

        /**
         * EndCollapse
         * 
         * Ends the current collapse layout.
         * 
         * @return void
         */
        private static void EndCollapse()
        {
            EndScrollContainer();
        }

        /**
         * GetCollapseHeight
         * 
         * Gets the height of the collapse.
         * 
         * @param string CollapseID The ID of the collapse.
         * @return float The height of the collapse.
         */
        private static int GetCollapseHeight(string CollapseID)
        {
            return CollapseHeights.ContainsKey(CollapseID) ? CollapseHeights[CollapseID] : 0;
        }

        /**
         * OnUpdate
         * 
         * Called once per frame.
         * 
         * @return void
         */
        public void OnUpdate()
        {
            ModInstance.CheckMods();
        }

        /**
         * OnGUI
         * 
         * Called once per frame to render and handle GUI events.
         * 
         * @return void
         */
        public void OnGUI()
        {
            ModInstance.CheckGuiMods();
        }

        /**
         * RenderPlayerTab
         * 
         * Renders the player tab.
         * 
         * @return void
         */
        private static void RenderPlayerTab()
        {
            BeginTab();

            var CurrentYPos = 0;

            Helper.AddLabel("Cheats", BoldLabelStyle);
            CurrentYPos += (int)BoldLabelStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Infinite Health", LabelStyle);
            Helper.AddButton(ModInstance.PlayerInfiniteHealth ? "Enabled" : "Disabled", ButtonStyle, ModInstance.TogglePlayerInfiniteHealth);
            EndOption();
            CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Infinite Stamina", LabelStyle);
            Helper.AddButton(ModInstance.PlayerInfiniteStamina ? "Enabled" : "Disabled", ButtonStyle, ModInstance.TogglePlayerInfiniteStamina);
            EndOption();
            CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Never Wanted", LabelStyle);
            Helper.AddButton(ModInstance.PlayerNeverWanted ? "Enabled" : "Disabled", ButtonStyle, ModInstance.TogglePlayerNeverWanted);
            EndOption();
            CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("No Clip", LabelStyle);
            Helper.AddButton(ModInstance.PlayerNoClip ? "Enabled" : "Disabled", ButtonStyle, ModInstance.TogglePlayerNoClip);
            EndOption();
            CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption($"Add Experience", LabelStyle);
            string PlayerExpAmountRef = ModInstance.PlayerExpAmount.ToString();
            Helper.AddInput(ref Textfields, ref PlayerExpAmountRef, "PlayerExpInput", LabelStyle.fixedWidth + MenuTabButtonSpacing, CurrentYPos + MenuTabButtonSpacing - 4, 80, 24, LabelStyle, TextfieldStyle, ModInstance.DoNothing);
            ModInstance.PlayerExpAmount = int.TryParse(PlayerExpAmountRef, out var PlayerExpAmountResult) ? PlayerExpAmountResult : 0;
            Helper.AddButton("Add", ButtonStyle, ModInstance.AddPlayerExp);
            EndOption();
            CurrentYPos += (int)ButtonStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption($"Change Cash", LabelStyle);
            string PlayerCashAmountRef = ModInstance.PlayerCashAmount.ToString();
            Helper.AddInput(ref Textfields, ref PlayerCashAmountRef, "PlayerCashInput", LabelStyle.fixedWidth + MenuTabButtonSpacing, CurrentYPos + MenuTabButtonSpacing - 4, 80, 24, LabelStyle, TextfieldStyle, ModInstance.DoNothing);
            ModInstance.PlayerCashAmount = int.TryParse(PlayerCashAmountRef, out var PlayerCashAmountResult) ? PlayerCashAmountResult : 0;
            Helper.AddButton("Add", ButtonStyle, ModInstance.AddPlayerCash);
            Helper.AddButton("Remove", ButtonStyle, ModInstance.RemovePlayerCash);
            EndOption();
            CurrentYPos += (int)ButtonStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption($"Change Balance", LabelStyle);
            string PlayerBalanceAmountRef = ModInstance.PlayerBalanceAmount.ToString();
            Helper.AddInput(ref Textfields, ref PlayerBalanceAmountRef, "PlayerBalanceInput", LabelStyle.fixedWidth + MenuTabButtonSpacing, CurrentYPos + MenuTabButtonSpacing - 4, 80, 24, LabelStyle, TextfieldStyle, ModInstance.DoNothing);
            ModInstance.PlayerBalanceAmount = int.TryParse(PlayerBalanceAmountRef, out var PlayerBalanceAmountResult) ? PlayerBalanceAmountResult : 0;
            Helper.AddButton("Add", ButtonStyle, ModInstance.AddPlayerBalance);
            Helper.AddButton("Remove", ButtonStyle, ModInstance.RemovePlayerBalance);
            EndOption();
            CurrentYPos += (int)ButtonStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            Helper.AddSpace(MenuSpacing);
            CurrentYPos += MenuSpacing;

            Helper.AddLabel("Movement", BoldLabelStyle);
            CurrentYPos += (int)BoldLabelStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Move Speed Multiplier", LabelStyle);
            string PlayerMoveSpeedMultiplierRef = ModInstance.PlayerMoveSpeedMultiplier.ToString();
            Helper.AddInput(ref Textfields, ref PlayerMoveSpeedMultiplierRef, "PlayerMoveSpeedMultiplierInput", LabelStyle.fixedWidth + MenuTabButtonSpacing, CurrentYPos + MenuTabButtonSpacing - 4, 80, 24, LabelStyle, TextfieldStyle, ModInstance.DoNothing);
            ModInstance.PlayerMoveSpeedMultiplier = float.TryParse(PlayerMoveSpeedMultiplierRef, out var PlayerMoveSpeedMultiplierResult) ? PlayerMoveSpeedMultiplierResult : 1;
            Helper.AddButton("Set", ButtonStyle, ModInstance.SetPlayerMoveSpeedMultiplier);
            Helper.AddButton("Reset", ButtonStyle, () => {
                Textfields["PlayerMoveSpeedMultiplierInput"].Value = ModInstance.ResetPlayerMoveSpeedMultiplier().ToString();
            });
            EndOption();
            CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Crouch Speed Multiplier", LabelStyle);
            string PlayerCrouchSpeedMultiplierRef = ModInstance.PlayerCrouchSpeedMultiplier.ToString();
            Helper.AddInput(ref Textfields, ref PlayerCrouchSpeedMultiplierRef, "PlayerCrouchSpeedMultiplierInput", LabelStyle.fixedWidth + MenuTabButtonSpacing, CurrentYPos + MenuTabButtonSpacing - 4, 80, 24, LabelStyle, TextfieldStyle, ModInstance.DoNothing);
            ModInstance.PlayerCrouchSpeedMultiplier = float.TryParse(PlayerCrouchSpeedMultiplierRef, out var PlayerCrouchSpeedMultiplierResult) ? PlayerCrouchSpeedMultiplierResult : 1;
            Helper.AddButton("Set", ButtonStyle, ModInstance.SetPlayerCrouchSpeedMultiplier);
            Helper.AddButton("Reset", ButtonStyle, () =>
            {
                Textfields["PlayerCrouchSpeedMultiplierInput"].Value = ModInstance.ResetPlayerCrouchSpeedMultiplier().ToString();
            });
            EndOption();
            CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Jump Height Multiplier", LabelStyle);
            string PlayerJumpMultiplierRef = ModInstance.PlayerJumpMultiplier.ToString();
            Helper.AddInput(ref Textfields, ref PlayerJumpMultiplierRef, "PlayerJumpMultiplierInput", LabelStyle.fixedWidth + MenuTabButtonSpacing, CurrentYPos + MenuTabButtonSpacing - 4, 80, 24, LabelStyle, TextfieldStyle, ModInstance.DoNothing);
            ModInstance.PlayerJumpMultiplier = float.TryParse(PlayerJumpMultiplierRef, out var PlayerJumpMultiplierResult) ? PlayerJumpMultiplierResult : 1;
            Helper.AddButton("Set", ButtonStyle, ModInstance.SetPlayerJumpMultiplier);
            Helper.AddButton("Reset", ButtonStyle, () =>
            {
                Textfields["PlayerJumpMultiplierInput"].Value = ModInstance.ResetPlayerJumpMultiplier().ToString();
            });
            EndOption();
            CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            EndTab();
        }

        /**
         * RenderWorldTab
         * 
         * Renders the world tab.
         * 
         * @return void
         */
        private static void RenderWorldTab()
        {
            BeginTab();

            var CurrentYPos = 0;

            Helper.AddLabel("Box ESP", BoldLabelStyle);
            CurrentYPos += (int)BoldLabelStyle.fixedHeight;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("NPC", LabelStyle);
            Helper.AddButton(ModInstance.WorldNpcEsp ? "Enabled" : "Disabled", ButtonStyle, ModInstance.ToggleWorldNpcEsp);
            EndOption();
            CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Player", LabelStyle);
            Helper.AddButton(ModInstance.WorldPlayerEsp ? "Enabled" : "Disabled", ButtonStyle, ModInstance.ToggleWorldPlayerEsp);
            EndOption();
            CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Range", LabelStyle);
            string WorldEspRangeRef = ModInstance.WorldEspRange.ToString();
            Helper.AddInput(ref Textfields, ref WorldEspRangeRef, "WorldEspRangeInput", LabelStyle.fixedWidth + MenuTabButtonSpacing, CurrentYPos + MenuTabButtonSpacing, 80, 24, LabelStyle, TextfieldStyle, ModInstance.DoNothing);
            ModInstance.WorldEspRange = int.TryParse(WorldEspRangeRef, out var WorldEspRangeResult) ? WorldEspRangeResult : 0;
            Helper.AddButton("Set", ButtonStyle, ModInstance.SetWorldEspRange);
            Helper.AddButton("Reset", ButtonStyle, () =>
            {
                Textfields["WorldEspRangeInput"].Value = ModInstance.ResetWorldEspRange().ToString();
            });
            EndOption();
            CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            Helper.AddSpace(MenuSpacing);
            CurrentYPos += MenuSpacing;

            Helper.AddLabel("Time", BoldLabelStyle);
            CurrentYPos += (int)BoldLabelStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Freeze", LabelStyle);
            Helper.AddButton(ModInstance.WorldFreezeTime ? "Enabled" : "Disabled", ButtonStyle, ModInstance.ToggleWorldFreezeTime);
            EndOption();
            CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Scale", LabelStyle);
            string WorldTimeScaleRef = ModInstance.WorldTimeScale.ToString();
            Helper.AddInput(ref Textfields, ref WorldTimeScaleRef, "WorldTimescaleInput", LabelStyle.fixedWidth + MenuTabButtonSpacing, CurrentYPos + MenuTabButtonSpacing, 80, 24, LabelStyle, TextfieldStyle, ModInstance.DoNothing);
            ModInstance.WorldTimeScale = float.TryParse(WorldTimeScaleRef, out var WorldTimeScaleResult) ? WorldTimeScaleResult : 1;
            Helper.AddButton("Set", ButtonStyle, ModInstance.SetWorldTimeScale);
            Helper.AddButton("Reset", ButtonStyle, () =>
            {
                Textfields["WorldTimescaleInput"].Value = ModInstance.ResetWorldTimeScale().ToString();
            });
            EndOption();
            CurrentYPos += (int)ButtonStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Change", LabelStyle);
            string WorldTimeRef = ModInstance.WorldTime;
            Helper.AddInput(ref Textfields, ref WorldTimeRef, "WorldTimeInput", LabelStyle.fixedWidth + MenuTabButtonSpacing, CurrentYPos + MenuTabButtonSpacing, 80, 24, LabelStyle, TextfieldStyle, ModInstance.DoNothing);
            ModInstance.WorldTime = WorldTimeRef;
            Helper.AddButton("Set", ButtonStyle, ModInstance.SetWorldTime);
            Helper.AddButton("+1", ButtonStyle, ModInstance.WorldTimeForwardHour);
            Helper.AddButton("-1", ButtonStyle, ModInstance.WorldTimeBackwardHour);
            EndOption();
            CurrentYPos += (int)ButtonStyle.fixedHeight + MenuTabButtonSpacing;

            EndTab();
        }

        /**
         * RenderSpawnerTab
         * 
         * Renders the spawner tab.
         * 
         * @return void
         */
        private static void RenderSpawnerTab()
        {
            BeginTab();

            // Default spawner category
            if (ModInstance.SpawnerSelectedCategory == "") ModInstance.SpawnerSelectedCategory = ModInstance.GetSpawnerCategories()[0];

            // Categories variables
            SidebarWidth = (int)((MenuTabWidth - (2 * MenuSpacing)) * .25);
            SidebarButtonStyle.fixedWidth = Mathf.Floor(SidebarWidth - (2 * MenuTabButtonSpacing));

            var CurrentYPos = 0;

            // Categories
            BeginSidebar(SidebarWidth);
            if (!ScrollPositions.ContainsKey("SpawnerScroll")) ScrollPositions["SpawnerScroll"] = Vector2.zero;
            Vector2 TmpSpawnerScrollPosition = ScrollPositions["SpawnerScroll"];
            BeginScrollContainer(ref TmpSpawnerScrollPosition, SidebarWidth, MenuTabHeight - MenuSpacing);
            ScrollPositions["SpawnerScroll"] = TmpSpawnerScrollPosition;
            foreach (var Category in ModInstance.GetSpawnerCategories())
            {
                Helper.AddButton(Category, SidebarButtonStyle, () =>
                {
                    ModInstance.SpawnerSelectedCategory = Category;
                });
                CurrentYPos += (int)SidebarButtonStyle.fixedHeight + MenuTabButtonSpacing;
            }
            BeginOption("Amount", MediumLabelStyle);
            string SpawnerItemAmountRef = ModInstance.SpawnerItemAmount.ToString();
            Helper.AddInput(ref Textfields, ref SpawnerItemAmountRef, "SpawnerItemAmountInput", MediumLabelStyle.fixedWidth + MenuTabButtonSpacing, CurrentYPos + MenuTabButtonSpacing, 80, 24, MediumLabelStyle, TextfieldStyle, ModInstance.DoNothing);
            ModInstance.SpawnerItemAmount = int.TryParse(SpawnerItemAmountRef, out var SpawnerItemAmountResult) ? SpawnerItemAmountResult : 0;
            Helper.AddButton("Set", ButtonStyle, ModInstance.SetSpawnerItemAmount);
            EndOption();
            EndScrollContainer();
            EndSidebar();

            SidebarContentWidth = (int)((MenuTabWidth - (2 * MenuSpacing)) * .75) - MenuSpacing;
            SidebarContentButtonStyle.fixedWidth = Mathf.Floor(((SidebarContentWidth - (MenuTabButtonSpacing * SidebarContentButtons)) / SidebarContentButtons) - (2 * MenuTabButtonSpacing));

            // Category items
            BeginSidebarContent(SidebarContentWidth);
            BeginOption("Filter", MediumLabelStyle);
            string SpawnerItemFilterRef = ModInstance.SpawnerItemFilter;
            var CustomTextfieldStyle = TextfieldStyle;
            CustomTextfieldStyle.fixedWidth = ((3 * (int)SidebarContentButtonStyle.fixedWidth) + (2 * MenuTabButtonSpacing)) - (int)MediumLabelStyle.fixedWidth - MenuTabButtonSpacing;
            Helper.AddInput(
                ref Textfields,
                ref SpawnerItemFilterRef,
                "SpawnerItemFilterInput",
                MediumLabelStyle.fixedWidth + (2 * MenuTabButtonSpacing),
                0,
                ((3 * (int)SidebarContentButtonStyle.fixedWidth) + (2 * MenuTabButtonSpacing)) - (int)MediumLabelStyle.fixedWidth - MenuTabButtonSpacing,
                24,
                MediumLabelStyle,
                CustomTextfieldStyle,
                ModInstance.DoNothing
            );
            ModInstance.SpawnerItemFilter = SpawnerItemFilterRef;
            Helper.AddButton("Clear", ButtonStyle, () => {
                Textfields["SpawnerItemFilterInput"].Clear();
            });
            EndOption();
            if (!ScrollPositions.ContainsKey("SpawnerContentScroll")) ScrollPositions["SpawnerContentScroll"] = Vector2.zero;
            Vector2 TmpSpawnerContentScrollPosition = ScrollPositions["SpawnerContentScroll"];
            BeginScrollContainer(ref TmpSpawnerContentScrollPosition, SidebarContentWidth, MenuTabHeight - MenuSpacing - 24 - MenuTabButtonSpacing);
            ScrollPositions["SpawnerContentScroll"] = TmpSpawnerContentScrollPosition;
            var SpawnerItems = ModInstance.GetSpawnerCategoryItems(ModInstance.SpawnerSelectedCategory);
            var CurrentItemCount = 0;
            if (ModInstance.SpawnerItemFilter != "" && ModInstance.SpawnerItemFilter != " " && ModInstance.SpawnerItemFilter.Length >= 3)
            {
                SpawnerItems = ModInstance.FilterSpawnerItems(ModInstance.SpawnerSelectedCategory, ModInstance.SpawnerItemFilter, SpawnerItems);
            }
            BeginHorizontal();
            foreach (var Item in SpawnerItems)
            {
                if (CurrentItemCount > SidebarContentButtons - 1)
                {
                    EndHorizontal();
                    BeginHorizontal();
                    CurrentItemCount = 0;
                }
                Helper.AddButton(Item.Key, SidebarContentButtonStyle, () => ModInstance.SpawnItem(Item.Value, ModInstance.SpawnerItemAmount));
                CurrentItemCount++;
            }
            EndHorizontal();
            EndScrollContainer();
            EndSidebarContent();

            EndTab();
        }

        /**
         * RenderMiscTab
         * 
         * Renders the misc tab.
         * 
         * @return void
         */
        private static void RenderMiscTab()
        {
            BeginTab();

            var CurrentYPos = 0;

            Helper.AddLabel("General", BoldLabelStyle);
            CurrentYPos += (int)BoldLabelStyle.fixedHeight;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Instant Dead Drops", LabelStyle);
            Helper.AddButton(ModInstance.MiscInstantDeadDrop ? "Enabled" : "Disabled", ButtonStyle, ModInstance.ToggleMiscInstantDeadDrop);
            EndOption();
            CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Instant Laundering", LabelStyle);
            Helper.AddButton(ModInstance.MiscInstantLaundering ? "Enabled" : "Disabled", ButtonStyle, ModInstance.ToggleMiscInstantLaundering);
            EndOption();
            CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Instant Mixing", LabelStyle);
            Helper.AddButton(ModInstance.MiscInstantMixing ? "Enabled" : "Disabled", ButtonStyle, ModInstance.ToggleMiscInstantMixing);
            EndOption();
            CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Growth Speed Multiplier", LabelStyle);
            string MiscGrowthSpeedRef = ModInstance.MiscPlantGrowSpeedMultiplier.ToString();
            Helper.AddInput(ref Textfields, ref MiscGrowthSpeedRef, "MiscGrowthSpeedInput", LabelStyle.fixedWidth + MenuTabButtonSpacing, CurrentYPos + MenuTabButtonSpacing, 80, 24, LabelStyle, TextfieldStyle, ModInstance.DoNothing);
            ModInstance.MiscPlantGrowSpeedMultiplier = float.TryParse(MiscGrowthSpeedRef, out var MiscGrowthSpeedResult) ? MiscGrowthSpeedResult : 1;
            ModInstance.SetMiscPlantGrowSpeed();
            Helper.AddButton(ModInstance.MiscUsePlantGrowSpeedMultiplier ? "Enabled" : "Disabled", ButtonStyle, ModInstance.ToggleMiscPlantGrowSpeed);
            EndOption();
            CurrentYPos += (int)ButtonStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Deal Success Chance", LabelStyle);
            string MiscDealSuccessChanceRef = ModInstance.MiscDealSuccessChance.ToString();
            Helper.AddInput(ref Textfields, ref MiscDealSuccessChanceRef, "MiscDealSuccessChanceInput", LabelStyle.fixedWidth + MenuTabButtonSpacing, CurrentYPos + MenuTabButtonSpacing, 80, 24, LabelStyle, TextfieldStyle, ModInstance.DoNothing);
            ModInstance.MiscDealSuccessChance = float.TryParse(MiscDealSuccessChanceRef, out var MiscDealSuccessChanceResult) ? MiscDealSuccessChanceResult : 0.5f;
            ModInstance.SetMiscDealSuccessChance();
            Helper.AddLabel("%", CharLabelStyle);
            Helper.AddButton(ModInstance.MiscUseDealSuccessChance ? "Enabled" : "Disabled", ButtonStyle, ModInstance.ToggleMiscDealSuccessChance);
            EndOption();
            CurrentYPos += (int)ButtonStyle.fixedHeight + MenuTabButtonSpacing;
            
            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Stack Size", LabelStyle);
            string MiscStackSizeRef = ModInstance.MiscStackSize.ToString();
            Helper.AddInput(ref Textfields, ref MiscStackSizeRef, "WorldStackSize", LabelStyle.fixedWidth + MenuTabButtonSpacing, CurrentYPos + MenuTabButtonSpacing, 80, 24, LabelStyle, TextfieldStyle, ModInstance.DoNothing);
            ModInstance.MiscStackSize = int.TryParse(MiscStackSizeRef, out var MiscStackSizeResult) ? MiscStackSizeResult : 20;
            ModInstance.SetMiscStackSize();
            Helper.AddButton(ModInstance.MiscUseStackSize ? "Enabled" : "Disabled", ButtonStyle, ModInstance.ToggleMiscStackSize);
            Helper.AddButton("Reset", ButtonStyle, ModInstance.ResetMiscStackSize);
            EndOption();
            CurrentYPos += (int)ButtonStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            Helper.AddSpace(MenuSpacing);
            CurrentYPos += MenuSpacing;

            // BeginOption("Trash Grabber Capacity", LabelStyle);
            // string MiscTrashGrabberCapacityRef = ModInstance.MiscTrashGrabberCapacity.ToString();
            // Helper.AddInput(ref Textfields, ref MiscTrashGrabberCapacityRef, "MiscTrashGrabberCapacityInput", LabelStyle.fixedWidth + MenuTabButtonSpacing, CurrentYPos + MenuTabButtonSpacing - 4, 80, 24, LabelStyle, TextfieldStyle, ModInstance.DoNothing);
            // ModInstance.MiscTrashGrabberCapacity = int.TryParse(MiscTrashGrabberCapacityRef, out var MiscTrashGrabberCapacityResult) ? MiscTrashGrabberCapacityResult : 21;
            // ModInstance.SetMiscTrashGrabberCapacity();
            // Helper.AddButton("Reset", ButtonStyle, ModInstance.ResetMiscTrashGrabberCapacity);
            // Helper.AddButton(ModInstance.MiscUseTrashGrabberCapacity ? "Disabled" : "Enabled", ButtonStyle, ModInstance.ToggleMiscTrashGrabberCapacity);
            // EndOption();
            // CurrentYPos += (int)ButtonStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddLabel("Equipped Item", BoldLabelStyle);
            CurrentYPos += (int)BoldLabelStyle.fixedHeight;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Change Quality", LabelStyle);
            foreach (var Quality in ModInstance.GetProductQualities())
            {
                Helper.AddButton(Quality, ButtonStyle, () => ModInstance.SetMiscEquippedProductQuality(Quality));
            }
            EndOption();
            CurrentYPos += (int)ButtonStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            BeginOption("Package Product", LabelStyle);
            foreach (var Packaging in ModInstance.GetProductPackagings())
            {
                Helper.AddButton(Packaging, ButtonStyle, () => ModInstance.SetMiscEquippedProductPackaging(Packaging));
            }
            EndOption();
            CurrentYPos += (int)ButtonStyle.fixedHeight + MenuTabButtonSpacing;

            Helper.AddSpace(MenuTabButtonSpacing);
            CurrentYPos += MenuTabButtonSpacing;

            Helper.AddSpace(MenuSpacing);
            CurrentYPos += MenuSpacing;

            BeginOption("Unlock All", LabelStyle);
            Helper.AddButton("NPCs", LargeButtonStyle, () => ModInstance.MiscUnlockAllNpcs());
            Helper.AddButton("Properties", LargeButtonStyle, () => ModInstance.MiscUnlockAllProperties());
            Helper.AddButton("Achievements", LargeButtonStyle, () => ModInstance.MiscUnlockAllAchievements());
            EndOption();
            CurrentYPos += (int)ButtonStyle.fixedHeight + MenuTabButtonSpacing;

            EndTab();
        }

        /**
         * RenderTeleportTab
         * 
         * Renders the teleport tab.
         * 
         * @return void
         */
        private static void RenderTeleportTab()
        {
            BeginTab();

            // Default teleport category
            if (ModInstance.TeleportSelectedCategory == "") ModInstance.TeleportSelectedCategory = ModInstance.GetTeleportCategories()[0];

            // Categories variables
            SidebarWidth = (int)((MenuTabWidth - (2 * MenuSpacing)) * .25);
            SidebarButtonStyle.fixedWidth = Mathf.Floor(SidebarWidth - (2 * MenuTabButtonSpacing));

            // Categories
            BeginSidebar(SidebarWidth);
            if (!ScrollPositions.ContainsKey("TeleportScroll")) ScrollPositions["TeleportScroll"] = Vector2.zero;
            Vector2 TmpTeleportScrollPosition = ScrollPositions["TeleportScroll"];
            BeginScrollContainer(ref TmpTeleportScrollPosition, SidebarWidth, MenuTabHeight - MenuSpacing);
            ScrollPositions["TeleportScroll"] = TmpTeleportScrollPosition;
            foreach (var Category in ModInstance.GetTeleportCategories())
            {
                Helper.AddButton(Category, SidebarButtonStyle, () =>
                {
                    ModInstance.TeleportSelectedCategory = Category;
                });
            }
            EndScrollContainer();
            EndSidebar();

            SidebarContentWidth = (int)((MenuTabWidth - (2 * MenuSpacing)) * .75) - MenuSpacing;
            SidebarContentButtonStyle.fixedWidth = Mathf.Floor(((SidebarContentWidth - (MenuTabButtonSpacing * SidebarContentButtons)) / SidebarContentButtons) - (2 * MenuTabButtonSpacing));

            // Category items
            BeginSidebarContent(SidebarContentWidth);
            BeginOption("Filter", MediumLabelStyle);
            string TeleportLocationFilterRef = ModInstance.TeleportLocationFilter;
            var CustomTextfieldStyle = TextfieldStyle;
            CustomTextfieldStyle.fixedWidth = ((3 * (int)SidebarContentButtonStyle.fixedWidth) + (2 * MenuTabButtonSpacing)) - (int)MediumLabelStyle.fixedWidth - MenuTabButtonSpacing;
            Helper.AddInput(
                ref Textfields,
                ref TeleportLocationFilterRef,
                "TeleportLocationFilterInput",
                MediumLabelStyle.fixedWidth + (2 * MenuTabButtonSpacing),
                0,
                ((3 * (int)SidebarContentButtonStyle.fixedWidth) + (2 * MenuTabButtonSpacing)) - (int)MediumLabelStyle.fixedWidth - MenuTabButtonSpacing,
                24,
                MediumLabelStyle,
                CustomTextfieldStyle,
                ModInstance.DoNothing
            );
            ModInstance.TeleportLocationFilter = TeleportLocationFilterRef;
            Helper.AddButton("Clear", ButtonStyle, () =>
            {
                Textfields["TeleportLocationFilterInput"].Clear();
            });
            EndOption();
            if (!ScrollPositions.ContainsKey("TeleportContentScroll")) ScrollPositions["TeleportContentScroll"] = Vector2.zero;
            Vector2 TmpTeleportContentScrollPosition = ScrollPositions["TeleportContentScroll"];
            BeginScrollContainer(ref TmpTeleportContentScrollPosition, SidebarContentWidth, MenuTabHeight - MenuSpacing - 24 - MenuTabButtonSpacing);
            ScrollPositions["TeleportContentScroll"] = TmpTeleportContentScrollPosition;
            var TeleportItems = ModInstance.GetTeleportCategoryItems(ModInstance.TeleportSelectedCategory);
            var CurrentItemCount = 0;
            if (ModInstance.TeleportLocationFilter != "" && ModInstance.TeleportLocationFilter != " " && ModInstance.TeleportLocationFilter.Length >= 3)
            {
                TeleportItems = ModInstance.FilterTeleportItems(ModInstance.TeleportSelectedCategory, ModInstance.TeleportLocationFilter, TeleportItems);
            }
            BeginHorizontal();
            foreach (var Item in TeleportItems)
            {
                if (CurrentItemCount > SidebarContentButtons - 1)
                {
                    EndHorizontal();
                    BeginHorizontal();
                    CurrentItemCount = 0;
                }
                Helper.AddButton(Item.Key, SidebarContentButtonStyle, () =>
                {
                    ModInstance.TeleportToLocation(ModInstance.TeleportSelectedCategory, Item.Key);
                });
                CurrentItemCount++;
            }
            EndHorizontal();
            EndScrollContainer();
            EndSidebarContent();

            EndTab();
        }

        /**
         * RenderEmployeesTab
         * 
         * Renders the employees tab.
         * 
         * @return void
         */
        private static void RenderEmployeesTab()
        {
            BeginTab();

            // Default employees selected property
            if (ModInstance.EmployeesSelectedProperty == "") ModInstance.EmployeesSelectedProperty = ModInstance.GetEmployeesCategories()[0];

            // Categories variables
            SidebarWidth = (int)((MenuTabWidth - (2 * MenuSpacing)) * .25);
            SidebarButtonStyle.fixedWidth = Mathf.Floor(SidebarWidth - (2 * MenuTabButtonSpacing));

            // Categories
            BeginSidebar(SidebarWidth);
            if (!ScrollPositions.ContainsKey("EmployeesScroll")) ScrollPositions["EmployeesScroll"] = Vector2.zero;
            Vector2 TmpEmployeesScrollPosition = ScrollPositions["EmployeesScroll"];
            BeginScrollContainer(ref TmpEmployeesScrollPosition, SidebarWidth, MenuTabHeight - MenuSpacing);
            ScrollPositions["EmployeesScroll"] = TmpEmployeesScrollPosition;
            foreach (var Category in ModInstance.GetEmployeesCategories())
            {
                Helper.AddButton(Category, SidebarButtonStyle, () =>
                {
                    ModInstance.EmployeesSelectedProperty = Category;
                });
            }
            EndScrollContainer();
            EndSidebar();

            // Employees variables
            SidebarContentWidth = (int)((MenuTabWidth - (2 * MenuSpacing)) * .75) - MenuSpacing;
            SidebarContentButtonStyle.fixedWidth = Mathf.Floor(((SidebarContentWidth - (MenuTabButtonSpacing * SidebarContentButtons)) / SidebarContentButtons) - (2 * MenuTabButtonSpacing));

            // Category items
            BeginSidebarContent(SidebarContentWidth);
            BeginOption("Filter", MediumLabelStyle);
            string EmployeesFilterRef = ModInstance.EmployeesFilter;
            var CustomTextfieldStyle = TextfieldStyle;
            CustomTextfieldStyle.fixedWidth = ((3 * (int)SidebarContentButtonStyle.fixedWidth) + (2 * MenuTabButtonSpacing)) - (int)MediumLabelStyle.fixedWidth - MenuTabButtonSpacing;
            Helper.AddInput(
                    ref Textfields,
                    ref EmployeesFilterRef,
                    "EmployeesFilterInput",
                    MediumLabelStyle.fixedWidth + (2 * MenuTabButtonSpacing),
                    0,
                    ((3 * (int)SidebarContentButtonStyle.fixedWidth) + (2 * MenuTabButtonSpacing)) - (int)MediumLabelStyle.fixedWidth - MenuTabButtonSpacing,
                    24,
                    MediumLabelStyle,
                    CustomTextfieldStyle,
                    ModInstance.DoNothing
                );
            ModInstance.EmployeesFilter = EmployeesFilterRef;
            Helper.AddButton("Clear", ButtonStyle, () =>
            {
                Textfields["EmployeesFilterInput"].Clear();
            });
            EndOption();
            if (!ScrollPositions.ContainsKey("EmployeesContentScroll")) ScrollPositions["EmployeesContentScroll"] = Vector2.zero;
            Vector2 TmpEmployeesContentScrollPosition = ScrollPositions["EmployeesContentScroll"];
            BeginScrollContainer(ref TmpEmployeesContentScrollPosition, SidebarContentWidth, MenuTabHeight - MenuSpacing - 24 - MenuTabButtonSpacing);
            ScrollPositions["EmployeesContentScroll"] = TmpEmployeesContentScrollPosition;
            var EmployeesItems = ModInstance.GetEmployeesCategoryItems(ModInstance.EmployeesSelectedProperty);
            var CurrentItemCount = 0;
            if (ModInstance.EmployeesFilter != "" && ModInstance.EmployeesFilter != " " && ModInstance.EmployeesFilter.Length >= 3)
            {
                EmployeesItems = ModInstance.FilterEmployeesItems(ModInstance.EmployeesFilter, EmployeesItems);
            }

            var CurrentYPos = MenuTabButtonSpacing;

            SidebarButtonFullStyle.fixedWidth = SidebarContentWidth - (2 * MenuSpacing);
            if (EmployeesItems.Count > 0) {
                foreach (var Item in EmployeesItems)
                {
                    Helper.AddLabel(Item.Key, BoldLabelStyle);
                    CurrentYPos += (int)BoldLabelStyle.fixedHeight + MenuTabButtonSpacing;

                    if (Item.Value == null || Item.Value.Count <= 0)
                    {
                        Helper.AddLabel($"No {Item.Key}s found!", LabelStyle);
                        CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;
                    }

                    if (Item.Value != null && Item.Value.Count > 0)
                    {
                        foreach (var EmployeeItem in Item.Value)
                        {
                            if (EmployeeItem == null) continue;

                            var CollapseId = $"{EmployeeItem.GUID.ToString()}SpeedsCollapse";
                            var CollapseStateText = GetCollapseState(CollapseId) ? "Show" : "Hide";

                            BeginHorizontal();
                            Helper.AddLabel(EmployeeItem.fullName, BoldLabelStyle);
                            Helper.AddButton($"{CollapseStateText} Movement", ButtonStyle, () => ToggleCollapse(CollapseId));
                            Helper.AddButton("Fire", ButtonStyle, () => ModInstance.FireEmployee(ModInstance.EmployeesSelectedProperty, Item.Key, EmployeeItem.GUID));
                            EndHorizontal();
                            // CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;

                            CurrentYPos = MenuTabButtonSpacing;
                            if (!BeginCollapse(SidebarContentWidth, 200, CollapseId, "Movement"))
                            {
                                var EmployeeSpeeds = ModInstance.GetEmployeeSpeeds(EmployeeItem.GUID);
                                if (EmployeeSpeeds != null && EmployeeSpeeds.Count > 0)
                                {
                                    foreach (var EmployeeSpeed in EmployeeSpeeds)
                                    {
                                        BeginHorizontal();
                                        Helper.AddLabel($"     {EmployeeSpeed.Key}", LabelStyle);

                                        string EmployeeSpeedRef = EmployeeSpeed.Value.ToString();
                                        Helper.AddInput(ref Textfields, ref EmployeeSpeedRef, $"{EmployeeItem.fullName}_{EmployeeSpeed.Key}", LabelStyle.fixedWidth + (2 * MenuTabButtonSpacing), CurrentYPos + MenuTabButtonSpacing - 4, 80, 24, LabelStyle, TextfieldStyle, ModInstance.DoNothing);
                                        float EmployeeSpeedTmp = float.TryParse(EmployeeSpeedRef, out var EmployeeSpeedResult) ? EmployeeSpeedResult : 1;
                                        Helper.AddButton("Set", ButtonStyle, () => ModInstance.SetEmployeeSpeed(EmployeeItem.GUID, EmployeeItem.EmployeeType.ToString(), EmployeeSpeed.Key, EmployeeSpeedTmp));
                                        Helper.AddButton("Reset", ButtonStyle, () =>
                                        {
                                            Textfields[$"{EmployeeItem.fullName}_{EmployeeSpeed.Key}"].Value = ModInstance.ResetEmployeeSpeed(EmployeeItem.GUID, EmployeeItem.EmployeeType.ToString(), EmployeeSpeed.Key).ToString();
                                        });
                                        CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;
                                        EndHorizontal();
                                    }
                                }
                            }
                            EndCollapse();
                            // CurrentYPos += GetCollapseHeight($"{EmployeeItem.GUID.ToString()}SpeedsCollapse") + MenuTabButtonSpacing;
                        }
                    }

                    Helper.AddButton($"Hire {Item.Key}", SidebarButtonFullStyle, () => ModInstance.HireEmployee(ModInstance.EmployeesSelectedProperty, Item.Key));
                    CurrentYPos += (int)SidebarButtonFullStyle.fixedHeight + MenuTabButtonSpacing;

                    Helper.AddSpace(MenuSpacing);
                    CurrentYPos += MenuSpacing;
                }
            } else
            {
                Helper.AddLabel("No employees found", LabelStyle);
                CurrentYPos += (int)LabelStyle.fixedHeight + MenuTabButtonSpacing;
            }
            EndScrollContainer();
            EndSidebarContent();

            EndTab();
        }
    }
}
